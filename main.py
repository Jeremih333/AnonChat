import asyncio
import os
from datetime import datetime, timedelta
from aiogram import Bot, F, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    Message, 
    CallbackQuery, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    BotCommand
)
from aiogram.enums import ChatMemberStatus
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiohttp import web

from database import Database  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from keyboard import online

class Form(StatesGroup):
    gender = State()
    age = State()
    vip_filter = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-service.onrender.com")
PORT = int(os.getenv("PORT", 10000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
bot = Bot(token=TOKEN)
dp = Dispatcher()
db = Database("users.db")  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ë–î

async def is_subscribed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç—Ä–µ–±—É–µ–º—ã–π –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member("@freedom346", user_id)
        return member.status in {
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def build_gender_kb(prefix: str = "gender") -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data=f"{prefix}_male"),
        InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data=f"{prefix}_female")
    ]])

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    user_id = message.from_user.id
    args = message.text.split()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if len(args) > 1 and args[1].startswith('ref'):
        referrer_id = args[1][3:]
        if referrer_id.isdigit() and int(referrer_id) != user_id:
            db.increment_referral_count(int(referrer_id))
            if db.get_user_cursor(int(referrer_id))["referral_count"] >= 5:
                expiry = datetime.now() + timedelta(days=30)
                db.activate_vip(int(referrer_id), expiry)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not db.get_user_cursor(user_id):
        db.new_user(user_id)
        await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=build_gender_kb())
        await state.set_state(Form.gender)
    else:
        user_data = db.get_user_cursor(user_id)
        if not user_data.get("gender") or not user_data.get("age"):
            await restart_registration(message, state)
        else:
            await show_main_menu(message)

async def restart_registration(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await message.answer("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\nüë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", 
                        reply_markup=build_gender_kb())
    await state.set_state(Form.gender)

@dp.callback_query(F.data.startswith("gender_"), Form.gender)
async def process_gender(cq: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    gender = cq.data.split("_")[1]
    db.update_gender_age(cq.from_user.id, gender=gender)
    await cq.message.edit_text(f"‚úÖ –ü–æ–ª: {'üë® –ú—É–∂—Å–∫–æ–π' if gender == 'male' else 'üë© –ñ–µ–Ω—Å–∫–∏–π'}")
    await cq.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (13-100):")
    await state.set_state(Form.age)

@dp.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    if not message.text.isdigit() or not (13 <= int(message.text) <= 100):
        return await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 13 –¥–æ 100:")
    
    db.update_gender_age(message.from_user.id, age=int(message.text))
    await state.clear()
    await show_main_menu(message)
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

async def show_main_menu(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    menu_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
    if db.check_vip_status(message.from_user.id):
        menu_text += "üåü –í–∞—à VIP —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω!\n"
    await message.answer(menu_text, reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç"))

@dp.message(F.text == "üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
async def search_dialog(message: Message):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    user_id = message.from_user.id
    user_data = db.get_user_cursor(user_id)
    
    if not user_data.get("gender") or not user_data.get("age"):
        return await restart_registration(message, FSMContext)
    
    if not await is_subscribed(user_id):
        return await ask_for_subscription(message)
    
    if db.check_vip_status(user_id):
        await message.answer("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞:", 
                           reply_markup=build_gender_kb("vip_filter"))
        await Form.vip_filter.set()
    else:
        await start_search(message)

async def ask_for_subscription(message: Message):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    subscribe_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/freedom346")],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
    ])
    await message.answer("üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!",
                       reply_markup=subscribe_kb)

async def start_search(message: Message, gender_filter: str = None):
    """–õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    user_id = message.from_user.id
    rival = db.search_vip(user_id, gender_filter) if gender_filter else db.search(user_id)
    
    if not rival:
        db.update_status(user_id, 1)
        await message.answer("üîç –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", 
                           reply_markup=online.builder("‚ùå –û—Ç–º–µ–Ω–∞"))
    else:
        db.start_chat(user_id, rival["id"])
        info_text = "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!"
        if db.check_vip_status(user_id):
            info_text += f"\nüë§ –ü–æ–ª: {'üë® –ú—É–∂—Å–∫–æ–π' if rival['gender'] == 'male' else 'üë© –ñ–µ–Ω—Å–∫–∏–π'}"
            info_text += f"\nüìÜ –í–æ–∑—Ä–∞—Å—Ç: {rival['age']}"
        
        await message.answer(info_text, reply_markup=online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
        await bot.send_message(rival["id"], "üéâ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!", 
                             reply_markup=online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å"))

@dp.callback_query(F.data.startswith("vip_filter_"))
async def vip_filter_handler(cq: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ VIP —Ñ–∏–ª—å—Ç—Ä–∞"""
    gender = cq.data.split("_")[2]
    await cq.message.edit_text(f"üîé –ò—â–µ–º {gender}...")
    await start_search(cq.message, gender)

@dp.callback_query(F.data == "check_sub")
async def check_subscription(cq: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if await is_subscribed(cq.from_user.id):
        await cq.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        await search_dialog(cq.message)
    else:
        await cq.answer("‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)

@dp.message(Command("stop"))
async def cmd_stop(message: Message):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
    user_data = db.get_user_cursor(message.from_user.id)
    if user_data and user_data["status"] == 2:
        rival_id = user_data["rid"]
        db.stop_chat(message.from_user.id, rival_id)
        await message.answer("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω", 
                           reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç"))
        await bot.send_message(rival_id, "‚ö†Ô∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç", 
                             reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç"))

@dp.message(Command("referral"))
async def cmd_referral(message: Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    bot_username = (await bot.get_me()).username
    ref_link = f"https://t.me/{bot_username}?start=ref{message.from_user.id}"
    await message.answer(
        f"üì® –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
        "üíé –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ 30 –¥–Ω–µ–π!"
    )

async def setup_bot_commands():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="/start", description="–°—Ç–∞—Ä—Ç"),
        BotCommand(command="/stop", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
        BotCommand(command="/referral", description="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"),
        BotCommand(command="/vip", description="VIP —Å—Ç–∞—Ç—É—Å")
    ]
    await bot.set_my_commands(commands)

async def webhook_init():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Render.com"""
    app = web.Application()
    webhook_handler = SimpleRequestHandler(dp, bot)
    webhook_handler.register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    
    runner = web.AppRunner(app)
    await runner.setup()
    await web.TCPSite(runner, "0.0.0.0", PORT).start()

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    await setup_bot_commands()
    await webhook_init()
    await asyncio.Event().wait()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

if __name__ == "__main__":
    asyncio.run(main())
