import asyncio
import os
from aiogram import Bot, F, Dispatcher
from aiogram.filters import Command
from aiogram.types import (
    Message, 
    CallbackQuery, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    BotCommand, 
    MessageReactionUpdated,
    ReactionTypeEmoji
)
from aiogram.enums import ChatMemberStatus, ChatType
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from database import database
from keyboard import online

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not (token := os.getenv("TELEGRAM_BOT_TOKEN")):
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-service-name.onrender.com")
PORT = int(os.getenv("PORT", 10000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token)
dp = Dispatcher()
db = database("users.db")

# –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
INTERESTS = [
    "–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã", "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", "–ò–≥—Ä—ã",
    "–ê–Ω–∏–º–µ", "–ú–µ–º—ã", "–§–ª–∏—Ä—Ç", 
    "–ú—É–∑—ã–∫–∞", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–§–∏–ª—å–º—ã",
    "–ö–Ω–∏–≥–∏", "–ü–∏—Ç–æ–º—Ü—ã", "–°–ø–æ—Ä—Ç"
]

async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id="@freedom346", user_id=user_id)
        return member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception:
        return False

def get_interests_keyboard(user_id: int) -> InlineKeyboardMarkup:
    user_interests = db.get_user_interests(user_id) or []
    buttons = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å –æ—Ç–º–µ—Ç–∫–æ–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    for interest in INTERESTS:
        emoji = "‚úÖ " if interest in user_interests else ""
        buttons.append(
            InlineKeyboardButton(
                text=f"{emoji}{interest}", 
                callback_data=f"interest_{interest}"
            )
        )
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    keyboard = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞
    keyboard.append([
        InlineKeyboardButton(
            text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã", 
            callback_data="reset_interests"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(Command("interests"))
async def interests_command(message: Message):
    if not await is_subscribed(message.from_user.id):
        subscribe_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/freedom346")],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
        ])
        await message.answer(
            "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à —á–∞—Ç!\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=subscribe_markup
        )
        return

    await message.answer(
        "–ú—ã –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–æ–µ–¥–∏–Ω–∏—Ç—å –≤–∞—Å —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª–∏ –ø–æ—Ö–æ–∂–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:",
        reply_markup=get_interests_keyboard(message.from_user.id)
    )

@dp.callback_query(F.data.startswith("interest_"))
async def toggle_interest(callback: CallbackQuery):
    interest = callback.data.split("_", 1)[1]
    user_id = callback.from_user.id
    
    current_interests = db.get_user_interests(user_id) or []
    
    if interest in current_interests:
        db.remove_interest(user_id, interest)
    else:
        db.add_interest(user_id, interest)
    
    await callback.message.edit_reply_markup(
        reply_markup=get_interests_keyboard(user_id)
    )
    await callback.answer()

@dp.callback_query(F.data == "reset_interests")
async def reset_interests(callback: CallbackQuery):
    db.clear_interests(callback.from_user.id)
    await callback.message.edit_reply_markup(
        reply_markup=get_interests_keyboard(callback.from_user.id)
    )
    await callback.answer("‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã!")

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
# ... [–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π] ...

async def on_startup(bot: Bot):
    await bot.set_webhook(f"{WEBHOOK_URL}/webhook")

async def main():
    await bot.set_my_commands([
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"),
        BotCommand(command="/stop", description="–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
        BotCommand(command="/next", description="–ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"),
        BotCommand(command="/link", description="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º"),
        BotCommand(command="/interests", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã")  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    ])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = web.Application()
    app["bot"] = bot
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot
    )
    webhook_requests_handler.register(app, path="/webhook")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    setup_application(app, dp, bot=bot)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await on_startup(bot)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
