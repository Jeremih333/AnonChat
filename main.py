import asyncio
import os
from datetime import datetime, timedelta
from aiogram import Bot, F, Dispatcher
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    ParseMode,
)
from aiogram.enums import ChatMemberStatus, ChatType
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from database import database
from keyboard import online

if not (token := os.getenv("TELEGRAM_BOT_TOKEN")):
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-service-name.onrender.com")
PORT = int(os.getenv("PORT", 10000))

bot = Bot(token)
dp = Dispatcher()
db = database("users.db")

DEVELOPER_ID = 1040929628

class BlockedUserMiddleware:
    async def __call__(self, handler, event: Message, data):
        user = db.get_user_cursor(event.from_user.id)
        if user:
            now = datetime.now()
            blocked_until = datetime.fromisoformat(user['blocked_until']) if user['blocked_until'] else None
            if user['blocked'] or (blocked_until and blocked_until > now):
                await event.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
                return
        return await handler(event, data)

dp.message.outer_middleware(BlockedUserMiddleware())

@dp.message(Command("dev"))
async def dev_menu(message: Message):
    if message.from_user.id == DEVELOPER_ID:
        blocked_users = db.get_blocked_users()
        blocked_list = "\n".join([f"ID: {user['id']}, –¥–æ: {user['blocked_until']}" for user in blocked_users]) or "–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        
        await message.answer(
            f"üë®‚Äçüíª –ú–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞\n"
            f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{blocked_list}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_dev_keyboard())

def get_dev_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="view_blocked_users")],
        [InlineKeyboardButton(text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="unblock_user")]
    ])

@dp.callback_query(F.data == "view_blocked_users")
async def view_blocked_users(callback: CallbackQuery):
    blocked_users = db.get_blocked_users()
    blocked_list = "\n".join([f"ID: {user['id']}, –¥–æ: {user['blocked_until']}" for user in blocked_users]) or "–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    await callback.message.edit_text(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{blocked_list}")

@dp.callback_query(F.data == "unblock_user")
async def unblock_user(callback: CallbackQuery):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
    dp.message.outer_middleware(BlockedUserMiddleware())
    dp.register_message_handler(handle_unblock_user, state="unblocking")

async def handle_unblock_user(message: Message):
    if message.from_user.id != DEVELOPER_ID:
        return
    try:
        user_id = int(message.text)
        db.unblock_user(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message(F.text == "–ü–æ–¥–∞—Ç—å –ê–ø–ø–µ–ª—è—Ü–∏—é")
async def appeal_request(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    if user and user['blocked']:
        await message.answer("üìù –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –∞–ø–ø–µ–ª—è—Ü–∏—é:")
        dp.register_message_handler(handle_appeal, state="appealing")

async def handle_appeal(message: Message):
    if message.from_user.id == message.from_user.id:
        appeal_text = message.text
        await bot.send_message(
            DEVELOPER_ID,
            f"üì© –ê–ø–ø–µ–ª—è—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}:\n{appeal_text}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"reply_{message.from_user.id}")],
                [InlineKeyboardButton(text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unblock_{message.from_user.id}")],
                [InlineKeyboardButton(text="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ignore_{message.from_user.id}")]
            ])
        )
        await message.answer("‚úÖ –í–∞—à–∞ –∞–ø–ø–µ–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")

@dp.callback_query(F.data.startswith("reply_"))
async def reply_to_appeal(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    await callback.message.answer(f"–û—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
    dp.register_message_handler(lambda msg: handle_reply(msg, user_id), state="replying")

async def handle_reply(message: Message, user_id: int):
    await bot.send_message(user_id, message.text)
    await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

@dp.callback_query(F.data.startswith("unblock_"))
async def unblock_appeal(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    db.unblock_user(user_id)
    await bot.send_message(user_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
    await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

@dp.callback_query(F.data.startswith("ignore_"))
async def ignore_appeal(callback: CallbackQuery):
    await callback.answer("üö´ –ê–ø–ø–µ–ª—è—Ü–∏—è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")

async def on_startup(bot: Bot):
    await bot.set_webhook(f"{WEBHOOK_URL}/webhook")

async def main():
    await bot.set_my_commands([
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"),
        BotCommand(command="/stop", description="–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
        BotCommand(command="/next", description="–ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"),
        BotCommand(command="/search", description="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"),
        BotCommand(command="/link", description="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º"),
        BotCommand(command="/interests", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã"),
        BotCommand(command="/dev", description="–ú–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
    ])

    app = web.Application()
    app["bot"] = bot

    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot
    )
    webhook_requests_handler.register(app, path="/webhook")

    setup_application(app, dp, bot=bot)
    await on_startup(bot)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()

    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
