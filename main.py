import asyncio
import os
from datetime import datetime, timedelta
from aiogram import Bot, F, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    Message, 
    CallbackQuery, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    BotCommand
)
from aiogram.enums import ChatMemberStatus
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiohttp import web

from database import Database
from keyboard import online

class Form(StatesGroup):
    gender = State()
    age = State()
    vip_filter = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not (token := os.getenv("TELEGRAM_BOT_TOKEN")):
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-service.onrender.com")
PORT = int(os.getenv("PORT", 10000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ë–î
bot = Bot(token)
dp = Dispatcher()
db = Database("users.db")

async def is_subscribed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member("@freedom346", user_id)
        return member.status in [
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR
        ]
    except Exception:
        return False

def gender_keyboard(prefix: str = "filter") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data=f"{prefix}_male"),
        InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data=f"{prefix}_female")
    ]])

@dp.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    args = message.text.split()
    user = db.get_user_cursor(message.from_user.id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if len(args) > 1 and args[1].startswith('ref'):
        referrer_id = args[1][3:]
        if referrer_id.isdigit() and int(referrer_id) != message.from_user.id:
            db.increment_referral_count(int(referrer_id))
            referrer = db.get_user_cursor(int(referrer_id))
            if referrer and referrer['referral_count'] >= 5:
                expiry = datetime.now() + timedelta(days=30)
                db.activate_vip(int(referrer_id), expiry)

    # –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if not user:
        db.new_user(message.from_user.id)
        await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_keyboard("gender"))
        await state.set_state(Form.gender)
    else:
        if not user.get('gender') or not user.get('age'):
            await start_registration(message, state)
        else:
            await main_menu(message)

async def start_registration(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await message.answer(
        "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\nüë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", 
        reply_markup=gender_keyboard("gender")
    )
    await state.set_state(Form.gender)

@dp.callback_query(F.data.startswith("gender_"), Form.gender)
async def process_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    gender = callback.data.split('_')[1]
    db.update_gender_age(callback.from_user.id, gender, None)
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª: {'üë® –ú—É–∂—Å–∫–æ–π' if gender == 'male' else 'üë© –ñ–µ–Ω—Å–∫–∏–π'}"
    )
    await request_age(callback.message)
    await state.set_state(Form.age)

async def request_age(message: Message):
    """–ó–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (13-100):")

@dp.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    if not message.text.isdigit() or not (13 <= int(message.text) <= 100):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 13 –¥–æ 100:")
        return
    
    age = int(message.text)
    db.update_gender_age(message.from_user.id, None, age)
    await state.clear()
    await main_menu(message)
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

async def main_menu(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
    if db.check_vip_status(message.from_user.id):
        text += "üåü VIP —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω!\n"
    await message.answer(text, reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç"))

@dp.message(F.text == "üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
async def search_chat(message: Message):
    """–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    user = db.get_user_cursor(message.from_user.id)
    
    if not user.get('gender') or not user.get('age'):
        await start_registration(message, FSMContext)
        return
    
    if not await is_subscribed(message.from_user.id):
        subscribe_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/freedom346")],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_sub")]
        ])
        await message.answer(
            "‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞!", 
            reply_markup=subscribe_markup
        )
        return
    
    if db.check_vip_status(message.from_user.id):
        await message.answer(
            "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞:", 
            reply_markup=gender_keyboard("vip_filter")
        )
        await Form.vip_filter.set()
    else:
        await start_search(message)

async def start_search(message: Message, gender_filter: str = None):
    """–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞"""
    user_id = message.from_user.id
    rival = db.search_vip(user_id, gender_filter) if gender_filter else db.search(user_id)
    
    if not rival:
        db.update_status(user_id, 1)
        await message.answer(
            "üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", 
            reply_markup=online.builder("‚ùå –û—Ç–º–µ–Ω–∞")
        )
    else:
        db.start_chat(user_id, rival['id'])
        text = "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!"
        if db.check_vip_status(user_id):
            text += f"\nüë§ –ü–æ–ª: {'üë® –ú—É–∂—Å–∫–æ–π' if rival['gender'] == 'male' else 'üë© –ñ–µ–Ω—Å–∫–∏–π'}"
            text += f"\nüìÖ –í–æ–∑—Ä–∞—Å—Ç: {rival['age']}"
        
        await message.answer(text, reply_markup=online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å"))
        await bot.send_message(
            rival['id'], 
            "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!", 
            reply_markup=online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å")
        )

@dp.callback_query(F.data.startswith("vip_filter_"))
async def process_vip_filter(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ VIP —Ñ–∏–ª—å—Ç—Ä–∞"""
    gender = callback.data.split('_')[2]
    await callback.message.edit_text(f"üîé –ò—â–µ–º {gender}...")
    await start_search(callback.message, gender)

@dp.callback_query(F.data == "check_sub")
async def check_subscription(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if await is_subscribed(callback.from_user.id):
        await callback.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        await search_chat(callback.message)
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)

@dp.message(Command("stop"))
async def stop_command(message: Message):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–∞"""
    user = db.get_user_cursor(message.from_user.id)
    if user and user['status'] == 2:
        rival_id = user['rid']
        db.stop_chat(message.from_user.id, rival_id)
        await message.answer(
            "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω", 
            reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
        )
        await bot.send_message(
            rival_id, 
            "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª", 
            reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
        )

@dp.message(Command("referral"))
async def referral_command(message: Message):
    """–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"""
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start=ref{message.from_user.id}"
    await message.answer(
        f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
        "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ 1 –º–µ—Å—è—Ü!"
    )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await bot.set_my_commands([
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å"),
        BotCommand(command="/stop", description="–°—Ç–æ–ø"),
        BotCommand(command="/referral", description="–†–µ—Ñ–µ—Ä–∞–ª–∫–∞"),
        BotCommand(command="/vip", description="VIP —Å—Ç–∞—Ç—É—Å")
    ])
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞
    app = web.Application()
    webhook_requests_handler = SimpleRequestHandler(dp, bot)
    webhook_requests_handler.register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
