import asyncio
import os
from datetime import datetime, timedelta
from aiogram import Bot, F, Dispatcher
from aiogram.filters import Command
from aiogram.types import (
    Message, 
    CallbackQuery, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    BotCommand, 
    ParseMode,
    ChatMemberUpdated,
)
from aiogram.enums import ChatMemberStatus, ChatType
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from database import database
from keyboard import online

if not (token := os.getenv("TELEGRAM_BOT_TOKEN")):
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-service-name.onrender.com")
PORT = int(os.getenv("PORT", 10000))

bot = Bot(token)
dp = Dispatcher()
db = database("users.db")

DEVELOPER_ID = 1040929628

class BlockedUserMiddleware:
    async def __call__(self, handler, event: Message, data):
        user = db.get_user_cursor(event.from_user.id)
        if user:
            now = datetime.now()
            blocked_until = datetime.fromisoformat(user['blocked_until']) if user['blocked_until'] else None
            if user['blocked'] or (blocked_until and blocked_until > now):
                await event.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
                return
        return await handler(event, data)

dp.message.outer_middleware(BlockedUserMiddleware())

@dp.my_chat_member()
async def handle_block(event: ChatMemberUpdated):
    if event.chat.type == ChatType.PRIVATE:
        user_id = event.from_user.id
        new_status = event.new_chat_member.status
        if new_status == ChatMemberStatus.KICKED:
            db.block_user(user_id, permanent=True)
        elif new_status == ChatMemberStatus.MEMBER:
            db.unblock_user(user_id)

async def check_chats_task():
    while True:
        now = datetime.now()
        long_searches = db.get_users_in_long_search(now - timedelta(minutes=5))
        for user in long_searches:
            db.stop_search(user['id'])
            try:
                await bot.send_message(user['id'], "‚ùå –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –¥–æ–ª–≥–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è", reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç"))
            except Exception:
                pass
        
        expired_blocks = db.get_expired_blocks(now)
        for user in expired_blocks:
            db.unblock_user(user['id'])
        
        await asyncio.sleep(180)

def get_block_keyboard(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"block_forever_{user_id}"),
            InlineKeyboardButton(text="–ì–æ–¥", callback_data=f"block_year_{user_id}"),
            InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data=f"block_month_{user_id}")
        ],
        [
            InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data=f"block_week_{user_id}"),
            InlineKeyboardButton(text="–î–µ–Ω—å", callback_data=f"block_day_{user_id}"),
            InlineKeyboardButton(text="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ignore_{user_id}")
        ]
    ])

@dp.callback_query(F.data == "report")
async def handle_report(callback: CallbackQuery):
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ –ë–î, –∞ –Ω–µ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞
    last_rival_id = db.get_last_rival(callback.from_user.id)
    if not last_rival_id:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –∂–∞–ª–æ–±—ã", show_alert=True)
        return

    messages = db.get_chat_log(callback.from_user.id, last_rival_id, limit=10)
    log_text = "\n".join([f"{m['timestamp']} ‚Äî {m['content']}" for m in reversed(messages)]) or "–ü—É—Å—Ç–æ–π —á–∞—Ç"

    report_msg = (
        f"üö® –ñ–∞–ª–æ–±–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}\n"
        f"–ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {last_rival_id}\n"
        f"–õ–æ–≥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n```\n{log_text}\n```"
    )
    try:
        await bot.send_message(
            DEVELOPER_ID,
            report_msg,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_block_keyboard(last_rival_id)
        )
        await callback.answer("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ –∏ –∂–∞–ª–æ–±—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã", show_alert=True)

@dp.callback_query(F.data.startswith("block_"))
async def handle_block_action(callback: CallbackQuery):
    parts = callback.data.split('_')
    action = parts[1]
    user_id = int(parts[2])
    
    durations = {
        'forever': None,
        'year': timedelta(days=365),
        'month': timedelta(days=30),
        'week': timedelta(weeks=1),
        'day': timedelta(days=1)
    }
    
    duration = durations.get(action)
    block_until = datetime.now() + duration if duration else None
    db.block_user(user_id, block_until=block_until)
    
    await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    await callback.message.edit_reply_markup(reply_markup=None)

@dp.callback_query(F.data.startswith("ignore_"))
async def handle_ignore(callback: CallbackQuery):
    user_id = int(callback.data.split('_')[1])
    await callback.answer("üö´ –ñ–∞–ª–æ–±–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
    await callback.message.edit_reply_markup(reply_markup=None)

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (start, search, stop, next, rate_good, rate_bad –∏ —Ç.–¥.) ---
# –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ stop_command —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏ –∏ –∂–∞–ª–æ–±—ã:

@dp.message(Command("stop"))
async def stop_command(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    if user and user.get("status") == 2:
        rival_id = user["rid"]
        db.stop_chat(message.from_user.id, rival_id)
        
        feedback_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëç", callback_data="rate_good"),
             InlineKeyboardButton(text="üëé", callback_data="rate_bad")],
            [InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="report")]
        ])
        
        for user_id in [message.from_user.id, rival_id]:
            await bot.send_message(
                user_id,
                "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–û—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ–Ω–∏–µ –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:\n"
                f"<code>{'https://t.me/Anonchatyooubot'}</code>",
                parse_mode=ParseMode.HTML,
                reply_markup=feedback_markup
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ü–µ–Ω–∫–∏ (rate_good, rate_bad) –±–µ—Ä—É—Ç last_rival –∏–∑ –ë–î –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ

@dp.callback_query(F.data == "rate_good")
async def handle_rate_good(callback: CallbackQuery):
    user = db.get_user_cursor(callback.from_user.id)
    if user and user.get("status") == 0:
        last_rival_id = db.get_last_rival(callback.from_user.id)
        if last_rival_id:
            db.add_rating(last_rival_id, 1)
            await callback.answer("‚úÖ –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É")
            await callback.message.edit_reply_markup()
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏", show_alert=True)
    else:
        await callback.answer("‚ùå –û—Ü–µ–Ω–∏–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞", show_alert=True)

@dp.callback_query(F.data == "rate_bad")
async def handle_rate_bad(callback: CallbackQuery):
    user = db.get_user_cursor(callback.from_user.id)
    if user and user.get("status") == 0:
        last_rival_id = db.get_last_rival(callback.from_user.id)
        if last_rival_id:
            db.add_rating(last_rival_id, -1)
            await callback.answer("‚úÖ –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É")
            await callback.message.edit_reply_markup()
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏", show_alert=True)
    else:
        await callback.answer("‚ùå –û—Ü–µ–Ω–∏–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞", show_alert=True)

# --- –ó–¥–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id="@freedom346", user_id=user_id)
        return member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception:
        return False

async def on_startup(bot: Bot):
    await bot.set_webhook(f"{WEBHOOK_URL}/webhook")

async def main():
    asyncio.create_task(check_chats_task())
    
    await bot.set_my_commands([
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"),
        BotCommand(command="/stop", description="–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
        BotCommand(command="/next", description="–ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"),
        BotCommand(command="/search", description="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"),
        BotCommand(command="/link", description="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º"),
        BotCommand(command="/interests", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã"),
        BotCommand(command="/dev", description="–ú–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
    ])
    
    app = web.Application()
    app["bot"] = bot
    
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot
    )
    webhook_requests_handler.register(app, path="/webhook")
    
    setup_application(app, dp, bot=bot)
    await on_startup(bot)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()
    
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
