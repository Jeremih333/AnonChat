import asyncio
import os
import uuid
from datetime import datetime, timedelta
from aiogram import Bot, F, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    Message, 
    CallbackQuery, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    BotCommand
)
from aiogram.enums import ChatMemberStatus, ChatType
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiohttp import web

# –í–∞—à–∏ –º–æ–¥—É–ª–∏
from database import database
from keyboard import online

class Form(StatesGroup):
    gender = State()
    age = State()
    vip_filter = State()

if not (token := os.getenv("TELEGRAM_BOT_TOKEN")):
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-service.onrender.com")
PORT = int(os.getenv("PORT", 10000))

bot = Bot(token)
dp = Dispatcher()
db = database("users.db")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db.execute('''CREATE TABLE IF NOT EXISTS users
             (id INTEGER PRIMARY KEY, 
             status INTEGER, 
             rid INTEGER, 
             gender TEXT, 
             age INTEGER,
             vip INTEGER DEFAULT 0,
             referral_count INTEGER DEFAULT 0,
             referrer_id INTEGER,
             vip_expiry DATETIME)''')

async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member("@freedom346", user_id)
        return member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception:
        return False

def check_vip_status(user_id: int) -> bool:
    user = db.get_user_cursor(user_id)
    if user and user['vip'] and user['vip_expiry']:
        expiry_date = datetime.strptime(user['vip_expiry'], '%Y-%m-%d %H:%M:%S')
        return datetime.now() < expiry_date
    return False

def gender_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
         InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
    ])

async def request_age(message: Message):
    await message.answer("üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 13 –¥–æ 100):")
    await Form.age.set()

@dp.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    args = message.text.split()
    user = db.get_user_cursor(message.from_user.id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if len(args) > 1 and args[1].startswith('ref'):
        referrer_id = args[1][3:]
        if referrer_id.isdigit() and int(referrer_id) != message.from_user.id:
            db.execute("UPDATE users SET referral_count = referral_count + 1 WHERE id = ?", 
                      (int(referrer_id),))
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è VIP
            referrer = db.get_user_cursor(int(referrer_id))
            if referrer and referrer['referral_count'] + 1 >= 5:
                expiry = datetime.now() + timedelta(days=30)
                db.execute("UPDATE users SET vip = 1, vip_expiry = ? WHERE id = ?",
                          (expiry.strftime('%Y-%m-%d %H:%M:%S'), referrer_id))

    if not user:
        db.new_user(message.from_user.id)
        await message.answer("üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_keyboard())
        await Form.gender.set()
    else:
        if not user.get('gender') or not user.get('age'):
            await message.answer("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")
            await start_registration(message)
        else:
            await main_menu(message)

async def start_registration(message: Message):
    await message.answer("üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_keyboard())
    await Form.gender.set()

@dp.callback_query(F.data.startswith("gender_"))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    gender = callback.data.split('_')[1]
    db.execute("UPDATE users SET gender = ? WHERE id = ?", 
              (gender, callback.from_user.id))
    await callback.message.edit_text(f"‚úÖ –í–∞—à –ø–æ–ª: {'üë® –ú—É–∂—Å–∫–æ–π' if gender == 'male' else 'üë© –ñ–µ–Ω—Å–∫–∏–π'}")
    await request_age(callback.message)
    await state.clear()

@dp.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit() or not (13 <= int(message.text) <= 100):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 13 –¥–æ 100:")
        return
    
    age = int(message.text)
    db.execute("UPDATE users SET age = ? WHERE id = ?", (age, message.from_user.id))
    await state.clear()
    await main_menu(message)
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

async def main_menu(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
    if check_vip_status(message.from_user.id):
        text += "üåü –í–∞—à VIP —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω!\n"
    await message.answer(text, reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç"))

@dp.message(F.text == "üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
async def search_chat(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    
    if not user.get('gender') or not user.get('age'):
        await message.answer("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")
        await start_registration(message)
        return
    
    if not await is_subscribed(message.from_user.id):
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        return
    
    # VIP —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if check_vip_status(message.from_user.id):
        await message.answer("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:",
                           reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                               [InlineKeyboardButton(text="–ü–æ–ª", callback_data="filter_gender"),
                                InlineKeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç", callback_data="filter_age")]
                           ]))
        await Form.vip_filter.set()
    else:
        await start_search(message)

async def start_search(message: Message):
    # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    rival = db.search(message.from_user.id)
    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞)

@dp.callback_query(F.data == "filter_gender")
async def filter_gender(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                                    reply_markup=gender_keyboard())

@dp.callback_query(F.data == "filter_age")
async def filter_age(callback: CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18-30):")

@dp.message(Form.vip_filter)
async def process_vip_filter(message: Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ VIP
    pass

@dp.message(Command("referral"))
async def referral_command(message: Message):
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start=ref{message.from_user.id}"
    await message.answer(f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
                        "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VIP —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ 1 –º–µ—Å—è—Ü!")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (stop, next, link –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏, 
# —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ VIP —Å—Ç–∞—Ç—É—Å

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await bot.set_my_commands([
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å"),
        BotCommand(command="/stop", description="–°—Ç–æ–ø"),
        BotCommand(command="/referral", description="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"),
        BotCommand(command="/vip", description="VIP —Å—Ç–∞—Ç—É—Å")
    ])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    app = web.Application()
    webhook_requests_handler = SimpleRequestHandler(dp, bot)
    webhook_requests_handler.register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
