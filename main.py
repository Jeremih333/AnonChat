import asyncio
import os
import sqlite3
from aiogram import Bot, F, Dispatcher
from aiogram.filters import Command
from aiogram.types import (
    Message, 
    CallbackQuery, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    BotCommand, 
    MessageReactionUpdated,
    ReactionTypeEmoji
)
from aiogram.enums import ChatMemberStatus, ChatType, ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from database import database
from keyboard import online

if not (token := os.getenv("TELEGRAM_BOT_TOKEN")):
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-service-name.onrender.com")
PORT = int(os.getenv("PORT", 10000))

bot = Bot(token)
dp = Dispatcher()
db = database("users.db")

async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id="@freedom346", user_id=user_id)
        return member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception:
        return False

@dp.message(Command("start"))
async def start_command(message: Message):
    try:
        user = db.get_user_cursor(message.from_user.id)
    except sqlite3.OperationalError as e:
        if "no such column" in str(e):
            db._create_tables()
            db._migrate_database()
            user = None
        else:
            raise
    
    if not user:
        db.new_user(message.from_user.id)
        await message.answer(
            "üë• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç –ë–æ—Ç!\n"
            "üó£ –ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.",
            reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
        )
    else:
        await search_chat(message)

@dp.message(Command("search"))
async def search_command(message: Message):
    await search_chat(message)

@dp.message(F.text.regexp(r'https?://\S+|@\w+') | F.caption.regexp(r'https?://\S+|@\w+'))
async def block_links(message: Message):
    await message.delete()
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–∞!")

@dp.message(F.text == "üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
async def search_chat(message: Message):
    if not await is_subscribed(message.from_user.id):
        subscribe_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/freedom346")],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
        ])
        await message.answer(
            "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à —á–∞—Ç!",
            reply_markup=subscribe_markup
        )
        return

    user = db.get_user_cursor(message.from_user.id)
    if user:
        rival = db.search(message.from_user.id)

        if not rival:
            await message.answer(
                "üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...",
                reply_markup=online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫")
            )
        else:
            db.start_chat(message.from_user.id, rival["id"])
            text = (
                "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω üêµ\n"
                "/next ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
                "/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n"
                "/interests ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∏—Å–∫–∞\n\n"
                f"<code>{'https://t.me/Anonchatyooubot'}</code>"
            )
            await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"))
            await bot.send_message(rival["id"], text, parse_mode=ParseMode.HTML, reply_markup=online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"))

@dp.callback_query(F.data == "check_sub")
async def check_subscription(callback: CallbackQuery):
    if await is_subscribed(callback.from_user.id):
        await callback.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        await search_chat(callback.message)
    else:
        await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

@dp.message(Command("stop"))
async def stop_command(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    if user and user.get("status") == 2:
        rival_id = user["rid"]
        db.stop_chat(message.from_user.id, rival_id)
        
        feedback_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëç", callback_data="rate_good"),
             InlineKeyboardButton(text="üëé", callback_data="rate_bad")],
            [InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="report")]
        ])
        
        await message.answer(
            "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–û—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ–Ω–∏–µ –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:",
            reply_markup=feedback_markup
        )
        
        await bot.send_message(
            rival_id,
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª –¥–∏–∞–ª–æ–≥ üòû\n"
            f"<code>{'https://t.me/Anonchatyooubot'}</code>",
            parse_mode=ParseMode.HTML
        )

@dp.message(Command("interests"))
async def interests_command(message: Message):
    interests = [
        "–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã", "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", "–ò–≥—Ä—ã", 
        "–ê–Ω–∏–º–µ", "–ú–µ–º—ã", "–§–ª–∏—Ä—Ç", "–ú—É–∑—ã–∫–∞", 
        "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–§–∏–ª—å–º—ã", "–ö–Ω–∏–≥–∏", 
        "–ü–∏—Ç–æ–º—Ü—ã", "–°–ø–æ—Ä—Ç"
    ]
    buttons = [
        [InlineKeyboardButton(text=interest, callback_data=f"interest_{interest}")] 
        for interest in interests
    ]
    buttons.append([InlineKeyboardButton(text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="reset_interests")])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

@dp.callback_query(F.data.startswith("interest_"))
async def interest_handler(callback: CallbackQuery):
    interest = callback.data.split("_", 1)[1]
    try:
        db.add_interest(callback.from_user.id, interest)
        await callback.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {interest}")
    except Exception:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

@dp.callback_query(F.data == "reset_interests")
async def reset_interests(callback: CallbackQuery):
    db.clear_interests(callback.from_user.id)
    await callback.answer("‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã")

@dp.message(Command("next"))
async def next_command(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    if user and user.get("status") == 2:
        rival_id = user["rid"]
        db.stop_chat(message.from_user.id, rival_id)
        
        feedback_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëç", callback_data="rate_good"),
             InlineKeyboardButton(text="üëé", callback_data="rate_bad")],
            [InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="report")]
        ])
        
        await message.answer(
            "–ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...\n–û—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:",
            reply_markup=feedback_markup
        )
        
        await bot.send_message(
            rival_id,
            "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞—á–∞–ª –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ üîÑ\n"
            f"<code>{'https://t.me/Anonchatyooubot'}</code>",
            parse_mode=ParseMode.HTML
        )
    await search_chat(message)

@dp.message(Command("link"))
async def link_command(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    if user and user.get("status") == 2:
        try:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
                    url=f"tg://user?id={message.from_user.id}"
                )]
            ])

            await bot.send_message(
                chat_id=user["rid"],
                text="üîó –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å—Å—ã–ª–∫–æ–π:",
                reply_markup=keyboard
            )
            await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")

@dp.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫")
async def stop_search(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    if user and user.get("status") == 1:
        db.stop_search(message.from_user.id)
        await message.answer("‚úÖ –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç"))
    else:
        await message.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def stop_chat(message: Message):
    await stop_command(message)

@dp.message_reaction()
async def handle_reaction(event: MessageReactionUpdated):
    if event.old_reaction == event.new_reaction:
        return

    user = db.get_user_cursor(event.user.id)
    if user and user.get("status") == 2 and event.new_reaction:
        rival_id = user["rid"]
        try:
            original_msg_id = db.get_rival_message_id(event.user.id, event.message_id)
            if not original_msg_id:
                return

            reaction = [
                ReactionTypeEmoji(emoji=r.emoji)
                for r in event.new_reaction
                if r.type == "emoji"
            ]

            await bot.set_message_reaction(
                chat_id=rival_id,
                message_id=original_msg_id,
                reaction=reaction
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

@dp.message(F.chat.type == ChatType.PRIVATE)
async def handler_message(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    if user and user.get("status") == 2:
        try:
            sent_msg = None
            if message.photo:
                sent_msg = await bot.send_photo(user["rid"], message.photo[-1].file_id, caption=message.caption)
            elif message.text:
                sent_msg = await bot.send_message(user["rid"], message.text)
            elif message.voice:
                sent_msg = await bot.send_audio(user["rid"], message.voice.file_id, caption=message.caption)
            elif message.video_note:
                sent_msg = await bot.send_video_note(user["rid"], message.video_note.file_id)
            elif message.sticker:
                sent_msg = await bot.send_sticker(user["rid"], message.sticker.file_id)

            if sent_msg:
                db.save_message_link(message.from_user.id, message.message_id, sent_msg.message_id)
                db.save_message_link(user["rid"], sent_msg.message_id, message.message_id)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def on_startup(bot: Bot):
    await bot.set_webhook(f"{WEBHOOK_URL}/webhook")

async def main():
    await bot.set_my_commands([
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"),
        BotCommand(command="/stop", description="–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
        BotCommand(command="/next", description="–ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"),
        BotCommand(command="/search", description="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"),
        BotCommand(command="/link", description="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º"),
        BotCommand(command="/interests", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã")
    ])
    
    app = web.Application()
    app["bot"] = bot
    
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot
    )
    webhook_requests_handler.register(app, path="/webhook")
    
    setup_application(app, dp, bot=bot)
    await on_startup(bot)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()
    
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
