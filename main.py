import asyncio
import os
from datetime import datetime, timedelta
from aiogram import Bot, F, Dispatcher
from aiogram.filters import Command, Text
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    ChatType,
)
from aiogram.enums import ChatMemberStatus, ParseMode
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from database import database
from keyboard import online

if not (token := os.getenv("TELEGRAM_BOT_TOKEN")):
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-service-name.onrender.com")
PORT = int(os.getenv("PORT", 10000))

bot = Bot(token)
dp = Dispatcher()
db = database("users.db")

DEVELOPER_ID = 1040929628

# --- Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
class BlockedUserMiddleware:
    async def __call__(self, handler, event: Message, data):
        user = db.get_user_cursor(event.from_user.id)
        if user:
            now = datetime.now()
            blocked_until = datetime.fromisoformat(user['blocked_until']) if user['blocked_until'] else None
            if user['blocked'] or (blocked_until and blocked_until > now):
                # –ü—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–∞—Ç—å –ê–ø–µ–ª–ª—è—Ü–∏—é"
                appeal_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–¥–∞—Ç—å –ê–ø–µ–ª–ª—è—Ü–∏—é", callback_data="appeal_start")]
                ])
                await event.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!", reply_markup=appeal_kb)
                return
        return await handler(event, data)

dp.message.outer_middleware(BlockedUserMiddleware())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é /dev —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ ---
@dp.message(Command("dev"))
async def dev_menu(message: Message):
    if message.from_user.id != DEVELOPER_ID:
        return
    stats = {"total_users": "N/A"}
    try:
        db.cursor.execute("SELECT COUNT(*) FROM users")
        stats["total_users"] = db.cursor.fetchone()[0]
    except Exception:
        pass

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="dev_blocked_users")],
        [InlineKeyboardButton(text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="dev_unblock_prompt")]
    ])

    await message.answer(
        f"üë®‚Äçüíª –ú–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {stats['total_users']}\n"
        "–ñ–∞–ª–æ–±—ã –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å—é–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=kb
    )

# --- –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@dp.callback_query(F.data == "dev_blocked_users")
async def show_blocked_users(callback: CallbackQuery):
    if callback.from_user.id != DEVELOPER_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    blocked_users = db.get_all_blocked_users()
    if not blocked_users:
        await callback.answer("–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
        return

    lines = []
    now = datetime.now()
    for u in blocked_users:
        uid = u['id']
        until = u['blocked_until']
        if until:
            until_dt = datetime.fromisoformat(until)
            remaining = until_dt - now
            if remaining.total_seconds() > 0:
                remain_str = str(remaining).split('.')[0]
            else:
                remain_str = "–ò—Å—Ç—ë–∫"
        else:
            remain_str = "–ù–∞–≤—Å–µ–≥–¥–∞"
        lines.append(f"ID: {uid} ‚Äî –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {remain_str}")

    text = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(lines)
    await callback.message.edit_text(text, reply_markup=None)
    await callback.answer()

# --- –ó–∞–ø—Ä–æ—Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ---
@dp.callback_query(F.data == "dev_unblock_prompt")
async def unblock_prompt(callback: CallbackQuery):
    if callback.from_user.id != DEVELOPER_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
    await callback.answer()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è ID
    dp.current_state(user=callback.from_user.id).set_state("waiting_unblock_id")

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

class DevUnblockStates(StatesGroup):
    waiting_unblock_id = State()

@dp.message(F.chat.type == ChatType.PRIVATE)
async def unblock_id_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != "waiting_unblock_id":
        return
    if message.from_user.id != DEVELOPER_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        await state.clear()
        return
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    user = db.get_user_cursor(user_id)
    if not user or not user['blocked']:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        await state.clear()
        return

    db.unblock_user(user_id)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∞—Ç—å –ê–ø–µ–ª–ª—è—Ü–∏—é" —É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@dp.callback_query(F.data == "appeal_start")
async def appeal_start_handler(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "üìù –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏—é, –æ–±—ä—è—Å–Ω–∏–≤, —á—Ç–æ –≤—ã –Ω–µ –≤–∏–Ω–æ–≤–∞—Ç—ã –≤ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
    )
    await dp.current_state(user=callback.from_user.id).set_state("waiting_appeal_text")

class AppealStates(StatesGroup):
    waiting_appeal_text = State()

@dp.message(F.chat.type == ChatType.PRIVATE)
async def appeal_text_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != "waiting_appeal_text":
        return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ø–µ–ª–ª—è—Ü–∏—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    appeal_text = message.text.strip()
    if not appeal_text:
        await message.answer("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∞–ø–µ–ª–ª—è—Ü–∏–∏.")
        return

    appeal_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"appeal_reply_{message.from_user.id}"),
            InlineKeyboardButton(text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"appeal_unblock_{message.from_user.id}"),
            InlineKeyboardButton(text="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"appeal_ignore_{message.from_user.id}")
        ]
    ])

    await bot.send_message(
        DEVELOPER_ID,
        f"üì© –ê–ø–µ–ª–ª—è—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}:\n\n{appeal_text}",
        reply_markup=appeal_kb
    )
    await message.answer("‚úÖ –í–∞—à–∞ –∞–ø–µ–ª–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")
    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–ø–µ–ª–ª—è—Ü–∏–∏ —É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ ---
@dp.callback_query(F.data.startswith("appeal_"))
async def appeal_action_handler(callback: CallbackQuery):
    if callback.from_user.id != DEVELOPER_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return

    data = callback.data.split('_', 2)
    action = data[1]
    user_id = int(data[2])

    if action == "reply":
        await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        await dp.current_state(user=callback.from_user.id).set_state(f"waiting_appeal_reply_{user_id}")
        await callback.answer()

    elif action == "unblock":
        db.unblock_user(user_id)
        await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        await callback.message.edit_reply_markup(reply_markup=None)

    elif action == "ignore":
        await callback.answer("–ê–ø–µ–ª–ª—è—Ü–∏—è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        await callback.message.edit_reply_markup(reply_markup=None)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –∞–ø–µ–ª–ª—è—Ü–∏—é ---
@dp.message(F.chat.type == ChatType.PRIVATE)
async def appeal_reply_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if not current_state or not current_state.startswith("waiting_appeal_reply_"):
        return
    if message.from_user.id != DEVELOPER_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        await state.clear()
        return

    user_id = int(current_state.split('_')[-1])
    reply_text = message.text.strip()
    if not reply_text:
        await message.answer("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.")
        return

    try:
        await bot.send_message(user_id, f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n{reply_text}")
        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await state.clear()

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –≤ database.py –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ---
def get_all_blocked_users(self):
    self.cursor.execute("SELECT * FROM users WHERE blocked = 1")
    return [dict(row) for row in self.cursor.fetchall()]

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª–∞—Å—Å database:
setattr(database, "get_all_blocked_users", get_all_blocked_users)

# --- –û—Å—Ç–∞–ª—å–Ω–æ–π –≤–∞—à –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

@dp.my_chat_member()
async def handle_block(event: ChatMemberUpdated):
    if event.chat.type == ChatType.PRIVATE:
        user_id = event.from_user.id
        new_status = event.new_chat_member.status
        if new_status == ChatMemberStatus.KICKED:
            db.block_user(user_id, permanent=True)
        elif new_status == ChatMemberStatus.MEMBER:
            db.unblock_user(user_id)

async def check_chats_task():
    while True:
        now = datetime.now()
        long_searches = db.get_users_in_long_search(now - timedelta(minutes=5))
        for user in long_searches:
            db.stop_search(user['id'])
            try:
                await bot.send_message(user['id'], "‚ùå –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –¥–æ–ª–≥–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è", reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç"))
            except Exception:
                pass
        
        expired_blocks = db.get_expired_blocks(now)
        for user in expired_blocks:
            db.unblock_user(user['id'])
        
        await asyncio.sleep(180)

def get_block_keyboard(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"block_forever_{user_id}"),
            InlineKeyboardButton(text="–ì–æ–¥", callback_data=f"block_year_{user_id}"),
            InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data=f"block_month_{user_id}")
        ],
        [
            InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data=f"block_week_{user_id}"),
            InlineKeyboardButton(text="–î–µ–Ω—å", callback_data=f"block_day_{user_id}"),
            InlineKeyboardButton(text="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ignore_{user_id}")
        ]
    ])

@dp.callback_query(F.data == "report")
async def handle_report(callback: CallbackQuery):
    last_rival_id = db.get_last_rival(callback.from_user.id)
    if not last_rival_id:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –∂–∞–ª–æ–±—ã", show_alert=True)
        return

    messages = db.get_chat_log(callback.from_user.id, last_rival_id, limit=10)
    log_text = "\n".join([f"{m['timestamp']} ‚Äî {m['content']}" for m in reversed(messages)]) or "–ü—É—Å—Ç–æ–π —á–∞—Ç"

    report_msg = (
        f"üö® –ñ–∞–ª–æ–±–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}\n"
        f"–ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {last_rival_id}\n"
        f"–õ–æ–≥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n```\n{log_text}\n```"
    )
    try:
        await bot.send_message(
            DEVELOPER_ID,
            report_msg,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_block_keyboard(last_rival_id)
        )
        await callback.answer("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã", show_alert=True)

@dp.callback_query(F.data.startswith("block_"))
async def handle_block_action(callback: CallbackQuery):
    parts = callback.data.split('_')
    action = parts[1]
    user_id = int(parts[2])

    durations = {
        'forever': None,
        'year': timedelta(days=365),
        'month': timedelta(days=30),
        'week': timedelta(weeks=1),
        'day': timedelta(days=1)
    }

    duration = durations.get(action)
    block_until = datetime.now() + duration if duration else None
    db.block_user(user_id, block_until=block_until)

    await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    await callback.message.edit_reply_markup(reply_markup=None)

@dp.callback_query(F.data.startswith("ignore_"))
async def handle_ignore(callback: CallbackQuery):
    user_id = int(callback.data.split('_')[1])
    await callback.answer("üö´ –ñ–∞–ª–æ–±–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
    await callback.message.edit_reply_markup(reply_markup=None)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥ –≤ –≥—Ä—É–ø–ø–∞—Ö
async def is_private_chat(message: Message) -> bool:
    return message.chat.type == ChatType.PRIVATE

@dp.message(Command("start"))
async def start_command(message: Message):
    if not await is_private_chat(message):
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    user = db.get_user_cursor(message.from_user.id)
    
    if user and user.get("status") == 2:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∏–∞–ª–æ–≥–µ
        await message.answer("‚ùå –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–µ.")
        return

    if not user:
        db.new_user(message.from_user.id)
        await message.answer(
            "üë• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç –ë–æ—Ç!\n"
            "üó£ –ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.",
            reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
        )
    else:
        await search_chat(message)

@dp.message(Command("search"))
async def search_command(message: Message):
    if not await is_private_chat(message):
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
    await search_chat(message)

@dp.message(F.text.regexp(r'https?://\S+|@\w+') | F.caption.regexp(r'https?://\S+|@\w+'))
async def block_links(message: Message):
    await message.delete()
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–∞!")

@dp.message(F.text == "üîé –ù–∞–π—Ç–∏ —á–∞—Ç")
async def search_chat(message: Message):
    if not await is_private_chat(message):
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    if not await is_subscribed(message.from_user.id):
        subscribe_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/freedom346")],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
        ])
        await message.answer(
            "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à —á–∞—Ç!",
            reply_markup=subscribe_markup
        )
        return

    user = db.get_user_cursor(message.from_user.id)
    if user:
        rival = db.search(message.from_user.id)

        if not rival:
            await message.answer(
                "üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...",
                reply_markup=online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫")
            )
        else:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
            interests_text = ""
            user_interests = set(user['interests'].split(',')) if isinstance(user['interests'], str) else user['interests']
            rival_interests = set(rival['interests'].split(',')) if isinstance(rival['interests'], str) else rival['interests']
            common_interests = user_interests & rival_interests
            if common_interests:
                interests_text = f" (–∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(common_interests)})"

            db.start_chat(message.from_user.id, rival["id"])
            text = (
                f"–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω üêµ{interests_text}\n"
                "/next ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
                "/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n"
                "/interests ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∏—Å–∫–∞\n\n"
                f"<code>{'https://t.me/Anonchatyooubot'}</code>"
            )
            await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"))
            await bot.send_message(rival["id"], text, parse_mode=ParseMode.HTML, reply_markup=online.builder("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"))

@dp.callback_query(F.data == "check_sub")
async def check_subscription(callback: CallbackQuery):
    if await is_private_chat(callback.message):
        if await is_subscribed(callback.from_user.id):
            await callback.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            await search_chat(callback.message)
        else:
            await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

@dp.message(Command("stop"))
async def stop_command(message: Message):
    if not await is_private_chat(message):
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    user = db.get_user_cursor(message.from_user.id)
    if user and user.get("status") == 2:
        rival_id = user["rid"]
        db.stop_chat(message.from_user.id, rival_id)

        feedback_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëç", callback_data="rate_good"),
             InlineKeyboardButton(text="üëé", callback_data="rate_bad")],
            [InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="report")]
        ])

        for user_id in [message.from_user.id, rival_id]:
            await bot.send_message(
                user_id,
                "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–û—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ–Ω–∏–µ –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:\n"
                f"<code>{'https://t.me/Anonchatyooubot'}</code>",
                parse_mode=ParseMode.HTML,
                reply_markup=feedback_markup
            )
    else:
        await message.answer("‚úÖ –î–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç"))

@dp.callback_query(F.data == "rate_good")
async def handle_rate_good(callback: CallbackQuery):
    user_id = callback.from_user.id
    rival_id = db.get_last_rival(user_id)
    if rival_id:
        db.add_rating(rival_id, 1)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        await callback.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É!")
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.", show_alert=True)
    await callback.message.edit_reply_markup(reply_markup=None)

@dp.callback_query(F.data == "rate_bad")
async def handle_rate_bad(callback: CallbackQuery):
    user_id = callback.from_user.id
    rival_id = db.get_last_rival(user_id)
    if rival_id:
        db.add_rating(rival_id, -1)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        await callback.answer("‚ùå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É!")
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.", show_alert=True)
    await callback.message.edit_reply_markup(reply_markup=None)

@dp.message(Command("interests"))
async def interests_command(message: Message):
    if not await is_private_chat(message):
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    interests = [
        "–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã", "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", "–ò–≥—Ä—ã",
        "–ê–Ω–∏–º–µ", "–ú–µ–º—ã", "–§–ª–∏—Ä—Ç", "–ú—É–∑—ã–∫–∞",
        "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–§–∏–ª—å–º—ã", "–ö–Ω–∏–≥–∏",
        "–ü–∏—Ç–æ–º—Ü—ã", "–°–ø–æ—Ä—Ç"
    ]
    buttons = [
        [InlineKeyboardButton(text=interest, callback_data=f"interest_{interest}")]
        for interest in interests
    ]
    buttons.append([InlineKeyboardButton(text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="reset_interests")])

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

@dp.callback_query(F.data.startswith("interest_"))
async def interest_handler(callback: CallbackQuery):
    if not await is_private_chat(callback.message):
        await callback.answer("üö´ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    interest = callback.data.split("_", 1)[1]
    try:
        db.add_interest(callback.from_user.id, interest)
        await callback.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {interest}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        await callback.message.delete()
    except Exception:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

@dp.callback_query(F.data == "reset_interests")
async def reset_interests(callback: CallbackQuery):
    if not await is_private_chat(callback.message):
        await callback.answer("üö´ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    db.clear_interests(callback.from_user.id)
    await callback.answer("‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã")

@dp.message(Command("next"))
async def next_command(message: Message):
    if not await is_private_chat(message):
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    user = db.get_user_cursor(message.from_user.id)
    if user and user.get("status") == 2:
        rival_id = user["rid"]
        db.stop_chat(message.from_user.id, rival_id)

        feedback_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëç", callback_data="rate_good"),
             InlineKeyboardButton(text="üëé", callback_data="rate_bad")],
            [InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="report")]
        ])

        for user_id in [message.from_user.id, rival_id]:
            await bot.send_message(
                user_id,
                "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–û—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ–Ω–∏–µ –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ:\n"
                f"<code>{'https://t.me/Anonchatyooubot'}</code>",
                parse_mode=ParseMode.HTML,
                reply_markup=feedback_markup
            )
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
        await message.answer("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç"))
    else:
        await message.answer("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
        await search_chat(message)

@dp.message(Command("link"))
async def link_command(message: Message):
    if not await is_private_chat(message):
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    user = db.get_user_cursor(message.from_user.id)
    if user and user.get("status") == 2:
        try:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞",
                    url=f"tg://user?id={message.from_user.id}"
                )]
            ])

            await bot.send_message(
                chat_id=user["rid"],
                text="üîó –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å—Å—ã–ª–∫–æ–π:",
                reply_markup=keyboard
            )
            await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        except Exception:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")

@dp.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫")
async def stop_search(message: Message):
    if not await is_private_chat(message):
        await message.answer("üö´ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    user = db.get_user_cursor(message.from_user.id)
    if user and user.get("status") == 1:
        db.stop_search(message.from_user.id)
        await message.answer("‚úÖ –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=online.builder("üîé –ù–∞–π—Ç–∏ —á–∞—Ç"))
    else:
        await message.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.message(F.text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def stop_chat(message: Message):
    await stop_command(message)

@dp.message_reaction()
async def handle_reaction(event: MessageReactionUpdated):
    if event.old_reaction == event.new_reaction:
        return

    user = db.get_user_cursor(event.user.id)
    if user and user.get("status") == 2 and event.new_reaction:
        rival_id = user["rid"]
        try:
            original_msg_id = db.get_rival_message_id(event.user.id, event.message_id)
            if not original_msg_id:
                return

            reaction = [
                ReactionTypeEmoji(emoji=r.emoji)
                for r in event.new_reaction
                if r.type == "emoji"
            ]

            await bot.set_message_reaction(
                chat_id=rival_id,
                message_id=original_msg_id,
                reaction=reaction
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

@dp.message(F.chat.type == ChatType.PRIVATE)
async def handler_message(message: Message):
    user = db.get_user_cursor(message.from_user.id)
    if user and user.get("status") == 2:
        try:
            reply_to_message_id = None
            if message.reply_to_message:
                reply_to_message_id = db.get_rival_message_id(message.from_user.id, message.reply_to_message.message_id)

            sent_msg = None
            if message.photo:
                sent_msg = await bot.send_photo(
                    user["rid"],
                    message.photo[-1].file_id,
                    caption=message.caption,
                    reply_to_message_id=reply_to_message_id
                )
            elif message.text:
                sent_msg = await bot.send_message(
                    user["rid"],
                    message.text,
                    reply_to_message_id=reply_to_message_id
                )
            elif message.voice:
                sent_msg = await bot.send_audio(
                    user["rid"],
                    message.voice.file_id,
                    caption=message.caption,
                    reply_to_message_id=reply_to_message_id
                )
            elif message.video_note:
                sent_msg = await bot.send_video_note(
                    user["rid"],
                    message.video_note.file_id,
                    reply_to_message_id=reply_to_message_id
                )
            elif message.sticker:
                sent_msg = await bot.send_sticker(
                    user["rid"],
                    message.sticker.file_id,
                    reply_to_message_id=reply_to_message_id
                )
            elif message.animation:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ GIF
                sent_msg = await bot.send_animation(
                    user["rid"],
                    message.animation.file_id,
                    caption=message.caption,
                    reply_to_message_id=reply_to_message_id
                )
            elif message.video:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
                sent_msg = await bot.send_video(
                    user["rid"],
                    message.video.file_id,
                    caption=message.caption,
                    reply_to_message_id=reply_to_message_id
                )
            elif message.document:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                sent_msg = await bot.send_document(
                    user["rid"],
                    message.document.file_id,
                    caption=message.caption,
                    reply_to_message_id=reply_to_message_id
                )

            if sent_msg:
                db.save_message_link(message.from_user.id, message.message_id, sent_msg.message_id)
                db.save_message_link(user["rid"], sent_msg.message_id, message.message_id)

                content = message.text or message.caption or ''
                db.save_message(message.from_user.id, user["rid"], content)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def is_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id="@freedom346", user_id=user_id)
        return member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception:
        return False

async def on_startup(bot: Bot):
    await bot.set_webhook(f"{WEBHOOK_URL}/webhook")

async def main():
    asyncio.create_task(check_chats_task())

    await bot.set_my_commands([
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"),
        BotCommand(command="/stop", description="–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
        BotCommand(command="/next", description="–ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫"),
        BotCommand(command="/search", description="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"),
        BotCommand(command="/link", description="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º"),
        BotCommand(command="/interests", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã"),
        BotCommand(command="/dev", description="–ú–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
    ])

    app = web.Application()
    app["bot"] = bot

    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot
    )
    webhook_requests_handler.register(app, path="/webhook")

    setup_application(app, dp, bot=bot)
    await on_startup(bot)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()

    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
